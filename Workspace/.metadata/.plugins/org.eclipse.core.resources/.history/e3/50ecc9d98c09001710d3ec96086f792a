package com;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import ch.gmtech.ste.learning.html.HtmlPage;
import ch.gmtech.ste.learning.seminar.Course;
import ch.gmtech.ste.learning.seminar.Seminar;

@SuppressWarnings("serial")
public class Servlet extends HttpServlet {

//	private Map<String,String> addresses = new HashMap<String,String>();
	private ArrayList<Seminar> seminars = new ArrayList<Seminar>();
	HtmlPage htmlPage = new HtmlPage();

//	@Override
//	public void init() {
//		addresses.put("/course/create", htmlPage.header() + htmlPage.renderFormBody());
//		addresses.put("/try/me", "<h1>you did it!</h1>");
//	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		
		if(normalizeUrl(req.getRequestURI()).contentEquals("/course/create")){
			resp.getWriter().write(htmlPage.header() + htmlPage.renderFormBody());
		} else {
			resp.getWriter().write("<h1>Page not found</h1>");
		}

	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException {
		
		Date startDate = null;
		String name = req.getParameter("name");
		Integer number = Integer.valueOf(req.getParameter("number"));
		Integer seats = Integer.valueOf(req.getParameter("seats"));
		String location = req.getParameter("location");
		String description = req.getParameter("description");
		try {
			startDate = new SimpleDateFormat("yyyy-MM-dd").parse(req.getParameter("startdate"));
		} catch (ParseException e) {
			throw new RuntimeException(e);
		}
		
		System.out.println("--------------------> CHECKER" + new Checker(name, number, seats, location, description, startDate).check());
		
		if(new Checker(name, number, seats, location, description, startDate).check()){
			System.out.println("--------------------> OK");
			createSeminar(name, number, seats, location, description, startDate);
			resp.sendRedirect("/course");
		}else{
			System.out.println("--------------------> NOTOK");
			addresses.put("/course/create", htmlPage.header() + htmlPage.renderValidatedFormBody(name, number, seats, location, description, startDate));
			resp.sendRedirect("/course/create");
		}
			

	}

	private String normalizeUrl(String path) {
		if(path.charAt(path.length()-1) == File.separatorChar){
			path = path.substring(0, path.length() - 1);
		}
		return path;
	}


	private void createSeminar(String name, Integer number, Integer seats, String location, String description, Date startDate) {
		
		seminars.add(new Seminar(location, new Course(name, number, description, startDate)));
		HtmlPage htmlPage = new HtmlPage();
		String body = "";
		
		for(Seminar seminarToRender : seminars) {
			body += htmlPage.renderBody(seminarToRender);
		}
		
		addresses.put("/course", htmlPage.header() + body);
	}

}
